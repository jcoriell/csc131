---
title: "Program 6: Card Game"
---

## Overview 

Your task in this programming assignment is to design three different
classes that will allow us to play a very basic card game. In the game,
the player and computer take turns picking out playing cards from a card
deck. The winner of any round is whoever out of the two has the higher
value playing card. Below is a class diagram showing the class
dependencies.

![Card Game Class Diagram](images/CardGameClassDiagram.png)

## Class Details.

### `Card` Class 

Below are some conditions for the `Card` Class.

1. The `Card` class has a `number` and a `suit`
2. Both instance variables are provided as arguments to the constructor
3. The class should have accessors and mutators for **all** instance variables which use the decorator
method. Additionally:
    a. the `number` mutator should only allow integer values between 2 and 10 inclusive i.e. [2,10]. If any other value is attempted, the number should be set to 2.


    b. the suit mutator should only allow arguments that match with one of the four possibilities in the `POSSIBLESUITS` constant defined at the top of the template file. If any other options are attempted, the suit should be set to “clubs”. Note that the suit is always lowercase. The suit mutator should handle the lowercasing of the suit should it be provided in a mixed case or all caps form.

::: {.callout-tip collapse="true"}
`isinstance` is a command that can be used to check and see whether an
argument is of a specific type e.g. an integer.
:::

4. The class should overload the `>`, `<`, and `==` operators. To compare cards, only the number of
the card is considered e.g. “4 of clubs” and “4 of diamonds” are equivalent in value but larger
than “3 of spades” and less than “5 of hearts”.

5. The class should have a `__str__` function that returns a string in the form “number of
suit” e.g. “4 of clubs” or “10 of diamonds”.

6. The class should have a `__hash__` function which will allow for
   `Card` objects to be used easily in datastructures that require
   hashing e.g. sets and dictionaries. All that function needs to have
   is

   ```python
   def __hash__(self):
       return hash((self.number, self.suit))
    ```

### `Deck` Class

Below are the conditions for the Deck class.

1. A `Deck` class has a `cards` instance variable. This variable contains a list of 36 `Card` objects
i.e. the numbers from 2 to 10 in all 4 possible suits.
2. The `Deck` class does **not** take any arguments to its constructor.
3. The class should have an accessor and mutator for its instance variable.
4. The class should have a `shuffle` function. As the name suggests, this function shuffles the
cards contained in the `cards` instance variable.
5. The class should also have a `size` function that returns the number of cards contained in the
`deck`.
6. The class should also contain a `draw` function that returns the `card` contained in the first
position of the `cards` list. It also ensures that this card is removed from the `deck`. However, if
there aren’t any cards in the deck, the `draw` function returns `None`.
7. contains a `__str__` function that returns the string representation of the `deck`. If the `deck` is
empty, it will return “`[--empty--]`”. Otherwise, it will return a comma seperated list of the
`cards` in the deck e.g. “`[5 of hearts, 6 of diamonds, 3 of diamonds, ]`”


### `Game` Class 

Below are the conditions for the Game class.

1. A `Game` class has a `deck` instance variable. This variable contains an object of type `Deck`.
2. The `Game` class does **not** take any arguments to its constructor. It initializes the `deck`, and then
shuffles it twice.
3. The class should have an accessor and mutator for its instance variables
4. The class should have a `start` function that prints out the starting message of the game, and
then calls the `play` or `end` functions based on user input.
5. The class should have an `end` function that prints out the ending message of the game as well as
the state of the `deck` after the game.
6. The class should have a `play` function that drives the logic of the game. If there are cards in the
`deck`, it will:
    a. draw two cards from the `deck` (one for the player and one for the computer),
    b. `shuffle` the deck again, and 
    c. then compare the two cards. 
    Based on this comparison, it will print out the winner of that round and then ask the user whether they want to proceed with
another round. If so, it will keep on going but otherwise, it will call the `end` function. Also if the
deck runs out of cards, it will call the `end` function.

## Extra Information

Even though this might seem like a lot, it is actually built on concepts you should be familiar with. You
are also provided with a test file (*CardGameTest.py*) that when executed in the same folder as a
*CardGame.py* file (that contains your class definitions) will test the functionality defined above that
your classes should have. The test file checks Object creation, printing, and the manipulation of instance
variables. 

Note that there is a boolean variable at the top of the *CardGameTest.py* file that will
allow you to switch between testing the Classes (i.e. `Card` and `Deck`) and playing the game. Feel free
to change that variable depending on which part of the code you are testing/trying out.

To execute the entire program, simply run the *CardGameTest.py* file. If your classes are properly
defined in a *CardGame.py* file that is in the same folder, then it should automatically use them to
produce the expected output shown below if the `TESTING` boolean is set to `True`.


![Expected Output when `TESTING` is `True`](images/CardGame01.png)

Alternatively, below are a couple of pictures showing parts of the game that one could see if `TESTING`
boolean is set to `False`.

![](images/CardGame02.png)

![](images/CardGame03.png)

A few extra constraints

1. You must include a meaningful header, use good coding style, use meaningful variable names,
and comment your source code where appropriate;
2. Your output should be as close to the sample run shown above as you can get yours;
3. You must submit just your class file (*CardGame.py*) as a single .py file.
4. You are provided with a template that provides a good starting point for your class designs. It
contains helpful libraries and constants that you can use in your design.

## Helper Files

<a href="./files/template.py" download>template.py</a>

<a href="./files/CardGameTest.py" download>CardGameTest.py</a>
