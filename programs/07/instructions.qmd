---
title: "Program: Sale Item"
---

## Overview

Your task in this assignment is to write python code that would implement a simple `Height` class that
could potentially be used as a small part of a much larger application. To allow for its use with other
systems, the specifications for the `Height` class are defined below.


## The Height Class Specifications

1. The class should be called Height and should be implemented in a file called `height.py`

2. The constructor takes two arguments: the first for the feet element and the second for the inch element of any `Height` object. This constructor uses default values of 0 for both feet and inch elements if they are not provided. The constructor is responsible for setting an instance variable called inchs and an instance variable called feet.

3. The class should have accessors and mutators for all instance variables which use the decorator
method discussed in class. Additionally:

    - The ft and inch mutators should not allow for those variables to be set to negative values. If that is attempted,the program should raise a `ValueError`.

    - The inch instance variable should never be allowed to be a value larger than or equal to 12. If that is attempted, the inch mutator should update the feet and inch value accordingly. For example, creating a Height object with 1ft and 26 inches should result in a height object with 3 ft and 2 inches. Modifying an object that is already 1 ft and 2 inches by setting the instance variable to 16, should result in the object being 2 ft and 4 inches.

4. The class should have a method called `to_inches` that returns the total number of inches that the height
object is worth as an integer.

5. The class should have a method called `to_feet` that returns the total number of feet that the height object is worth as a float.

6. The class should have a method called `to_centimeters` that returns the total number of centimeters that the height object is worth as a float.

5. The class should also contain a `__str__` method that determines how `Height` objects are
represented when printed. Example: 3’2” for an object with 3 ft and 2 inch. Note there are no spaces in the string representation of a height object.


6. The class should also overload some mathematical and comparison operators i.e. defines what
those operators mean in the context of Height objects. The operators in question to include are `+`, `-` , `>`, `>=`, `<=`, `<`, `==`, and `!=`.

7. Feel free to add any other functions that you feel will help to make your class more efficient and/
or cleaner, just be sure they do not conflict with the autograder or cause errors.


## Tests

The Height class will be subject to the following tests. Some examples are provided for you to test your code locally.

1. The ability to instantiate a Height object. That is, your constructor accepts the appropriate arguments and runs without error. 

    ```Python
    # instantiating a height of x feet and y inches would not result in any errors
    h1 = Height(1, 2)   # here we used 1ft and 2in

    # instantiating a height where no feet or inches are specified
    h2 = Height()       # by default, it should set feet and inches to 0
    ```

2. The **existance** of the `feet` instance variable after instantiation.

    ```Python
    h1 = Height(1, 2)
    print(h1.feet)      # no errors thrown

    h2 = Height()
    print(h2.feet)      # no errors thrown
    ```

3. The **existance** of the `inches` instance variable after instantiation.

    ```Python
    h1 = Height(1, 2)
    print(h1.inches)      # no errors

    h2 = Height()
    print(h2.inches)      # no errors
    ```

4. The `feet` instance variable is **correct** after instantiation.

    ```Python
    h1 = Height(1, 2)
    print(h1.feet)      # outputs a value of 1

    h2 = Height()
    print(h2.feet)      # outputs a value of 0
    ```

5. The `inches` instance variable is **correct** after instantiation.

    ```Python
    h1 = Height(1, 2)
    print(h1.inches)      # outputs a value of 2

    h2 = Height()
    print(h2.inches)      # outputs a value of 0
    ```


6. The `feet` instance variable cannot be set to a negative value.

    ```Python
    h1 = Height()
    h1.feet = -10       # this should raise a ValueError
    ```


7. The `inches` instance variable cannot be set to a negative value.

    ```Python
    h1 = Height()
    h1.inches = -1000   # this should raise a ValueError
    ```

8. The `inches` setter overflows into the feet instance variable appropriately.

    ```Python
    h1 = Height()
    h1.inches = 27
    print(h1.feet)      # outputs 2
    print(h1.inches)    # outputs 3
    ```




9. The `to_inch` function does not throw any errors when run.

10. The `to_inch` function returns the correct value. An example of using the profit function follows:

    ```Python
    h1 = Height(2, 3)
    print(h1.to_inches())   # outputs 27
    ```


11. The `to_feet` function does not throw any errors when run.


12. The `to_feet` returns the correct value. Accuracy will be checked within 4 decimal places. Do not apply rounding.

    ```Python
    h1 = Height(2, 3)
    print(h1.to_feet())   # outputs 2.25
    ```


13. The `to_centimeters` function does not throw any errors when run.


14. The `to_centimeters` returns the correct value. Accuracy will be checked within 4 decimal places. Do not apply rounding.

    ```Python
    h1 = Height(2, 3)
    print(h1.to_centimeters())   # outputs 68.58
    ```

15. The `__str__` method returns the appropriate string (must be an exact match).

    ```Python
    h1 = Height(2, 3)
    print(h1)       # outputs 2'3"  
    ```

16. Individual tests for each of the following operators:  `+`, `-` , `>`, `>=`, `<=`, `<`, `==`, and `!=`.
    In the case of subtraction, if the subtraction would result in a negative value, catch the `ValueError` that you programmed by using a `try...except...` and return a `Height` object with a height of 0 feet and 0 inches.

    ```Python
    h1 = Height(1, 10)
    h2 = Height(1, 3)
    h3 = Height(1, 10)

    # Addition
    h4 = h1 + h2
    print(h3)       # outputs 3'1"

    # Subtraction
    h4 = h1 - h2
    print(h3)       # outputs 0'7"

    h4 = h2 - h1    # catch the value error in the __sub__ function
    print(h3)       # outputs 0'0"

    # Equal To
    print(h1 == h2) # outputs False
    print(h1 == h3) # outputs True

    # Not Equal To
    print(h1 != h2) # outputs True
    print(h1 != h3) # outputs False

    # Greater Than
    print(h1 > h2)  # outputs True
    print(h2 > h1)  # outputs False
    print(h1 > h3)  # outputs False

    # Greater Than or Equal To
    print(h1 >= h2)  # outputs True
    print(h2 >= h1)  # outputs False
    print(h1 >= h3)  # outputs True

    # Less Than
    print(h1 < h2)  # outputs False
    print(h2 < h1)  # outputs True
    print(h1 < h3)  # outputs False

    # Less Than or Equal To
    print(h1 <= h2) # outputs False
    print(h2 <= h1) # outputs True
    print(h1 <= h3) # outputs True
    ```




## Additional Files

You are provided with a template that you should use. Note that the template contains a main section with some code already inside of it. Use the main portion of the code and the examples above to test your solution before submitting to the auto-grader. 

<a href="./files/template.py" download>template.py</a>

## Submission

You must submit your code to the course website as a single .py file.


