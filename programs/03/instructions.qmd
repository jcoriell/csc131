---
title: "Program: Sale Item"
---

## Overview

Your task in this assignment is to write python code that would implement a simple SaleItem class
that could potentially be used as a small part of a much larger application. To allow for its use with other
systems, the specifications for the `SaleItem` class are defined below. 


## The SaleItem Class Specifications

1. The `SaleItem` class has a `name`, `cost` and `price` as instance variables. The `name` instance variable represents the name of the item, `cost` represents the cost for the store, and `price` is the price the customer pays.

2. All three instance variables are also provided as arguments to the constructor in the order indicated (name, then cost, then price).

3. The class should have accessors and mutators for all instance variables which use the decorator
method discussed in class. Additionally, the `cost` and `price` mutators should not allow for those variables to be set to negative values. If that is attempted, they are set to `0` instead.

4. The class should have a `profit` function that returns the amount of money (as a float) that selling the item
would provide (i.e. the difference between the `price` and the `cost`).

5. The class should have an `apply_sale` function that applies a percentage sale to the price of
the item. It receives the percentage value as an argument and adjusts the price appropriately. Note that this function does not return anything.

6. The class should have a `__str__` method that is responsible for return a string respresentation of a `SaleItem` object. The representation should contain the `name`, `cost`, and `price` in that order, **each separated by 1 single tab character**. Additionally, the cost and price should be represented with 2 digits after the decimal point.


## Tests

The SaleItem class will be subject to the following tests. Some examples are provided for you to test your code locally.

1. The ability to instantiate an instance of the SaleItem class. That is, your constructor accepts the appropriate arguments and runs without error and the appropriate instance variables exist and are valid.

    ```Python
    # instantiating a banana would not result in any errors
    banana = SaleItem("banana", 1, 2)

    # testing existence
    print(banana.name)          # no error is thrown when trying to access banana.name
    print(banana.cost)          # no error is thrown when accessing banana.price
    print(banana.price)         # no error is thrown when accessing banana.cost

    # testing accuracy
    print(banana.name == "banana")  # this should print True
    print(banana.cost == 1)         # this should print True
    print(banana.price == 2)        # this should print True

    print(banana.name == "apple")   # this should print False
    print(banana.cost == 20)        # this should print False
    print(banana.price == 40)       # this should print False
    ```


3. Three tests for the **existence** of the accessors/getters and mutators/setters for each instance variable. You shouldn't need to run any of the following as you should already know whether or not you're implementing the decorators correctly for your getters and setters, however, if you're curious, check out the following block. 

    ```Python
    # Run the following lines in your __main__ portion of the code.
    # If any of them throw errors, then you don't have an accessor/getter for the corresponding instance variable
    SaleItem.name.fget
    SaleItem.cost.fget
    SaleItem.price.fget

    # If any of these following lines throw errors, then you don't have a mutator/setter for the corresponding instance variable.
    SaleItem.name.fset
    SaleItem.cost.fset
    SaleItem.price.fset
    ```


4. This test checks that your instance variables can be set to valid values outside of the class, checks the accuracy of those valid values, attempt to set invalid values to the price and cost variables outside of the class, checks that invalid values are handled properly (by being set to 0), then checks if the constructor is also preventing invalid values from being set (whether through a call to the setter or through logic within the constructor). Some example code to run to check if your code is functioning properly concerning a [Bluth Banana](https://youtu.be/Nl_Qyk9DSUw?si=EueiJCv4nq0NZeI-){target="_blank"} is included below.

    ```Python
    # instantiation of the banana
    banana = SaleItem("banana", 1, 2)

    # can set name, price, and cost to valid values without error
    banana.name = "Bluth Banana"
    banana.price = 10.00  # set price to 10.00
    banana.cost = 0.50  # set cost to 0.5

    # testing to see the values
    print(banana.name == "Bluth Banana")    # True
    print(banana.price == 10.00)              # True
    print(banana.cost == 0.50)              # True


    # Try setting some invalid values for cost and price
    banana.price = -10000   # set price to a negative value
    banana.cost = -20000    # set cost to a negative value

    # check the values
    print(banana.price == 0) # True
    print(banana.cost == 0)  # True


    # instantiation a sale item with invalid price and cost
    banana = SaleItem("banana", -100, -200)

    # check the values
    print(banana.price == 0) # True
    print(banana.cost == 0)  # True
    ```


6. The `profit` function does not throw any errors when run and returns the correct value. Note that the value will be checked to an accuracy of 2 decimal places, but you do not need to round.

    ```Python
    # instantiation of the banana
    banana = SaleItem("banana", 1, 100)

    # applying the sale
    print(banana.profit())  # outputs 99.
    ```



6. The `apply_sale` function does not throw any errors when run and the consumer price is modified appropriately.

    ```Python
    # instantiation of the banana
    banana = SaleItem("banana", 1, 100)

    # applying the sale
    banana.apply_sale(10)   # a 10 percent discount is applied to the price

    # checking the value of the price
    print(banana.price)     # outputs 90, not 100
    ```


## Additional Files

You are provided with a template that you should use. Note that the template contains a `__main__` section with some code already inside of it. Use the main portion of the code and the examples above to test your solution before submitting to the auto-grader. 

<a href="./files/template.py" download>template.py</a>

## Submission

You must submit your code to the course website as a single .py file.


