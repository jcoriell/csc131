---
title: "Program 2: Population"
---

## Overview
Your task in this assignment is to write a program that calculates the frequency of population ranges in the given city population file. You are provided with a text file that contains the documented populations of all the cities in the world (i.e. over 42,000 cities). Your code should prompt the user for the file name, the minimum, maximum and step sizes to use in the population table, and then create a table that contains how many cities have populations in those ranges. 

## Sample Outputs

### Sample 1
Below is a successful sample run where generated inputs when tested are highlighted in red

<pre class="styled-pre">
What is the name of the file with the population information? <span style="color: red;">popn.txt</span>.
This file has 42175 cities in it.
What population do you want as the minimum? <span style="color: red;">0</span>
What population do you want as the maximum? <span style="color: red;">100000</span>
How many rows do you want in the table? <span style="color: red;">10</span>
----------------------------------------
Population              Frequencies
----------------------------------------
0 - 9999                13905
10000 - 19999           10348
20000 - 29999           4780
30000 - 39999           2698
40000 - 49999           1715
50000 - 59999           1213
60000 - 69999           891
70000 - 79999           734
80000 - 89999           535
90000 - 99999           411
----------------------------------------

</pre>

### Sample 2

Similar to a previous assignment, your code should recognize when the file name provided does not exist and reprompt the user until the an existing filename is given. Below is a sample run with that functionality demonstrated.

<pre class="styled-pre">
What is the name of the file with the population information? <span style="color: red;">input</span>
The file name you specified does not exist.
Enter file name again: <span style="color: red;">output</span>
The file name you specified does not exist.
Enter file name again: <span style="color: red;">Test</span>
The file name you specified does not exist.
Enter file name again: <span style="color: red;">popn.txt</span>
This file has 42175 cities in it.
What population do you want as the minimum? <span style="color: red;">0</span>
What population do you want as the maximum? <span style="color: red;">100000</span>
How many rows do you want in the table? <span style="color: red;">10</span>
----------------------------------------
Population              Frequencies
----------------------------------------
0 - 9999                13905
10000 - 19999           10348
20000 - 29999           4780
30000 - 39999           2698
40000 - 49999           1715
50000 - 59999           1213
60000 - 69999           891
70000 - 79999           734
80000 - 89999           535
90000 - 99999           411
----------------------------------------
</pre>

It may be helpful to know that there are 40 dashes running across the table and the columns were separated by two tab characters.


## Required Functions

### Load File

A function named `load_file` that reads the contents of a file. The function takes a single argument, the filename, and returns a list of all the numbers found in the file. It ensures that the provided filename exists and, if not, prompts the user to enter the correct filename. This is an excellent opportunity to use a try-except construct, which you may have encountered in previous lessons or assignments.

### Population Ranges

A function named `create_ranges` that is in charge of generating the strings found in the `Population` column. This function should take in three arguments: a minimum value, a maximum value, and the number of rows in the table (in that order) and then creates a list that contains the appropriate ranges of populations. 

As an example, if this function receives `0, 100, 5` as arguments, then the list it generates would be:

```Python
["0 - 19", "20 - 39", "40 - 59", "60 - 79", "80 - 99"]
```

Notice how the arguments passed to the function affected the output. The first interval starts at 0, the last interval does not include the value 100, and there are 5 intervals generated (i.e. number of rows).

### Count Cities
A function named `count_cities` that is in charge of counting the number of cities in each given population range, it receives the list containing the ranges produced from the previous function, and the list containing all population values generated from the `load_file` function.

This function should return a list that contains the number of times a population appears for each corresponding range. 

For example, assume our population ranges are as follows:

```Python
population_ranges = ["0 - 19", "20 - 39", "40 - 59", "60 - 79", "80 - 99"]
```

Also assume there are 5 cities with a population between 0 and 19, 12 cities with a population between 40 and 59, and 3 cities with a population of between 60 and 79. Then this function would create the following list: 

```Python
frequencies = [5, 0, 12, 3, 0]
```

It then returns this list to the calling statement.

### Generate Table

The `generate_table` function will generate the table and return it as a string to the calling statement. This function will take in two arguments, the first represents the population ranges and the second represents the frequencies. Note that this function is not responsible for printing anything, it simply returns a string to the calling statement that represents the entire table.

### Main
This program will have a function called `main` that is in charge of calling on the functions mentioned above and creating the outputs as shown in the sample runs.



## Additional Files

<a href="./files/popn.txt" download>popn.txt</a>

<a href="./files/template.py" download>template.py</a>


## Additional Information

To help clarify, here are some specifics and/or constraints:

(1) You are provided with an input file called `popn.txt` that contains the populations of over
42,000 cities that you will be parsing. Note that your code should be able to parse any filename
that the user provides and not just files named `popn.txt`. Use this file to test your code locally.

(2) Your code will require the functions listed above. Feel free to add any extra functions
you think are necessary.

(3) You might consider including the following conditional in your code when running it locally so that when you upload it to the autograder the autograder ignores the `main` portion of your code (note that the `main` portion of your code is not the function called main).

    ```Python
    if __name__ == "__main__":
    ```

    Note that the autograder would ignore this since the autograder will import your code into another file. Any code inside of that conditional is ignored when a file is imported. 


(4) Your output should be exactly like the sample runs shown above (of course, actual results will
vary depending on the min, max, and interval values chosen by the autograder);

(5) You must include a meaningful header, use good coding style, use meaningful variable names,
and comment your source code where appropriate;

(6) You must use the provided source code template (it contains helpful comments that can help you
structure your code); and

(7) You must submit your source code as a single `.py` file. 





