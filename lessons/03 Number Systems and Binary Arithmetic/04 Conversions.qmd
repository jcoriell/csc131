## Number system conversion
Now that we have reviewed the concept of number systems and the idea of counting in a variety of 
bases, let’s look more carefully at what exactly a numeric “base” is. As you learned long ago in grade 
school, 123 is the way we normally write the number one hundred twenty-three. This is because the “1”
is in the *hundreds place*, the “2” is in the *tens place*, and the “3” is in the *ones place*. That is, the digits 
are positional. Each digit is multiplied by the value of its position (think of this as a weight for each 
digit position), and the results are then added together. Consider the following way of breaking down 
the number 123:

![](./images/Lesson13-02.png)

The system we normally use for representing numbers is called the decimal number system. In this 
system, the rightmost digit is referred to as being in the one’s or “units” position. Immediately to the 
left of the units position is the ten’s position. To the left of the ten’s position is the hundred’s position, 
then the thousand’s, then the ten thousand’s, and so on. The decimal number system is a “base ten” 
positional number system, because the value of each position can be expressed as a power of the number
ten.

The exponent that the base is raised to is given by the position minus one. The right-most position (i.e., position 1), or units position, is 10^0^.
Note that anything to the power of zero is equal to 1. This right-most position is also known as the least significant position or digit 
(since it is represented by the lowest power of 10). The tens position is 10^1^, the hundreds is 10^2^, the thousands is 10^3^, and so on. The value of
each position is exactly ten times the value of the position immediately to its right.

The other bases work similarly. In the binary number system, the base is two; therefore, the values of 
the positions (given from right to left) are one (2^0^), two (2^1^), four (2^2^), eight (2^3^), sixteen (2^4^), thirty-two 
(2^5^), and so on. The value of each position in a base two system is two times the value of the position 
immediately to its right. For example, the number five is represented in base two as 101~2~ (since there is 
a one in the four’s position and a one in the units position). This is illustrated below:

![](./images/Lesson13-03.png)

![](./images/Lesson13-04.png)

In the hexadecimal number system, the base is sixteen. Therefore, the values of the positions (again 
from right to left) are one (16^0^), sixteen (16^1^), two hundred fifty-six (16^2^), four thousand ninety-six (16^3^),
and so on. The value of each position in this system is exactly sixteen times the value of the position 
immediately to its right. The value of the base sixteen number 1A3~16~ is four hundred nineteen, since 
there is one in the two hundred and fifty six's position, ten in the sixteen’s position, and three in the units
position. This is illustrated below:

![](./images/Lesson13-05.png)

Here's one more example illustrating the representation of the number “nineteen ninety nine” in all three 
of the bases we have discussed; first, in base ten:

![](./images/Lesson13-06.png)

Now, in base two:

![](./images/Lesson13-07.png)

![](./images/Lesson13-08.png)

And finally, in base sixteen:

![](./images/Lesson13-09.png)

One of the most common tasks we face when working with multiple bases is converting numbers from 
one base to another. We have already seen how to convert from base sixteen and base two to base ten: 
simply multiply the value of each symbol by the value of its position and add the results together. But 
how do we convert from base ten to base sixteen or to base two? We also need to figure out how to 
convert from base two to base sixteen and from base sixteen to base two.

Converting from base two to base sixteen and from base sixteen to base two is easy. In fact, the only 
reason computer scientists even use base sixteen is because it serves as convenient “shorthand” for base 
two. The following illustrates the fact that each base sixteen digit can be represented by a group of 
exactly four base two digits:

| Base 16 (hexadecimal) | Base 2 (binary) |
|--|:--------|
| 0 | 00000 |
| 1 | 00001 |
| 2 | 00010 |
| 3 | 00011 |
| 4 | 00100 |
| 5 | 00101 |
| 6 | 00110 |
| 7 | 00111 |
| 8 | 01000 |
| 9 | 01001 |
| A | 01010 |
| B | 01011 |
| C | 01100 |
| D | 01101 |
| E | 01110 |
| F | 01111 |

To convert from base sixteen to base two, simply replace each base sixteen digit with its corresponding 
group of four binary digits. For example, the rather imposing hexadecimal number 1AFC3~16~ can easily 
be converted its binary representation as illustrated below:

![](./images/Lesson13-10.png)

Therefore, 1AFC316 = 110101111110000112. Note that leading zeros have been removed as they are not
necessary.

::: {.callout-important title="Activity" collapse=false}
Try to convert FACE16 to base two.

Now try to convert 4B1D16 to base two.
:::

Converting from base two to base sixteen is just as straightforward. We scan the base two number from 
right to left, replacing each group of four binary digits that we encounter with the equivalent 
hexadecimal digit. It is important that we group the digits of the base two representation from *right to left*,
in case the number of digits is not evenly divisible by four. If this occurs, we simply add leading 
zeros until the number of digits is divisible by four. Conversion of the bit pattern 11111001111~2~ to its 
hexadecimal representation is shown below:

![](./images/Lesson13-11.png)

The original bit pattern, 11111001111, was first broken down from right-to-left into groups of four, and 
a leading zero was added to the left-most group: 0111 1100 1111. Ultimately, 11111001111~2~ = 7CF~16~.

::: {.callout-important title="Activity" collapse=false}
Try to convert 1111000000001101~2~ to hexadecimal.

Try to convert 11101111010100101~2~ to hexadecimal.
:::

Note that these conversions between binary and hexadecimal representations in no way change the 
actual number being represented. For example, 7CF~16~ and 11111001111~2~ both refer to the same number 
(1,999), as was illustrated earlier.

We have now looked at conversion methods from base two (and base sixteen) to base ten, from base 
sixteen to base two, and from base two to base sixteen. The only conversions that we have yet to cover 
are from base ten to base sixteen and from base ten to base two. We really only need to look at the base 
ten to base two conversion, since conversion between base two and base sixteen is so trivial. If you 
have a base ten number and want its base sixteen representation, you can apply a decimal to binary 
conversion algorithm, and then change the base two result to its base sixteen representation via the 
grouping method described above.

A number can be converted from decimal to binary by subtracting from it the largest power of two that 
is less than or equal to the number, and repeating until a remainder of zero is reached. The binary 
representation of the number is then formed by placing a “1” in the positions corresponding to each of 
the powers of two that were subtracted. A “0” is placed in the positions corresponding to the powers of 
two that were not subtracted.

For example, take the decimal number 37. The largest power of two that can be subtracted from it is 32 
(2^5^), which leaves five. The largest power of two that can be subtracted from 5 is 4 (2^2^), which leaves 
one. Finally, the largest power of two that can be subtracted from 1 is 1 (2^0^), which leaves zero. The 
base two representation of the number is thus formed by placing a “1” in the thirty-two’s, four’s, and 
units positions, and by placing a “0” in all other positions. This gives 100101~2~. The conversion process
for this number is illustrated below:

![](./images/Lesson13-12.png)

![](./images/Lesson13-13.png)

Another method of converting from decimal to binary is to divide the decimal number in half and record
both the quotient and the remainder. We then repeat this process with the quotient, while keeping track 
of the remainder of each division. This is repeated until the quotient is zero. The binary equivalent of 
the original number is subsequently given by listing the remainders in the reverse order of their 
derivation (i.e., from the most recent remainder to the first remainder). Here's this method on the 
decimal number 37:

![](./images/Lesson13-14.png)

Listing the remainders in reverse order gives 100101 (the same as in the previous example). Therefore, 
37~10~ = 100101~2~.

::: {.callout-important title="Activity" collapse=false}
Try to convert the decimal number 642 to base two.
:::
